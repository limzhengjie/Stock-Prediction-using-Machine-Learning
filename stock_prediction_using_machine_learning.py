# -*- coding: utf-8 -*-
"""Stock Prediction using Machine Learning

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/140Mcy_nxGIQTJSpyhNPCZmGIZBOaFAlG
"""

# This program predicts stock prices by using machine learning models
import yfinance as yf
import numpy as np
from sklearn.linear_model import LinearRegression
from sklearn.svm import SVR
from sklearn.model_selection import train_test_split

# Get stock data
df = yf.download("META")
df.head()

df = df[["Adj Close"]]
df

# A variable for predicting 'n' days out into the future

forecast_out = 30
df['Prediction'] = df [["Adj Close"]].shift(-forecast_out)

df

# Create independent dataset - X

X = np.array(df.drop(['Prediction'],1))
X = X[:-forecast_out]
X

# Create the dependent dataset - Y
Y = np.array(df['Prediction'])
Y = Y[:-forecast_out]
Y

# Split the data into 80% training and 20% testing

x_train,x_test,y_train,y_test = train_test_split(X, Y, test_size=0.2)

svr_rbf = SVR(kernel='rbf', C=1e3, gamma=0.1)
svr_rbf.fit(x_train,y_train)

svm_confidence = svr_rbf.score(x_test, y_test)
print("SVM Confidence: ", svm_confidence)

# Create and train the Linear Regression Model

lr = LinearRegression()
lr.fit(x_train,y_train)

lr_confidence = lr.score(x_test, y_test)
print("Linear Regression Confidence: ", lr_confidence)

# Set x_forecast equal to the last 30 days rows of the original data set from Adj Close column

x_forecast = np.array(df.drop(['Prediction'],1))[-forecast_out:]
x_forecast

# Testing Model LR

lr_prediction = lr.predict(x_forecast)
lr_prediction

svm_prediction = svr_rbf.predict(x_forecast)
svm_prediction

